<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes" ?>
<?rfc compact="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc subcompact="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes" ?>

<rfc ipr="trust200902" docName="draft-vanrein-http-unauth-user-04" category="std">

<front>

	<title abbrev="HTTP user@">User Names for HTTP Resources</title>

	<author initials="R" surname="Van Rein" fullname="Rick van Rein">
		<organization>InternetWide.org</organization>
		<address>
			<postal>
				<street>Haarlebrink 5</street>
				<city>Enschede</city>
				<region>Overijssel</region>
				<code>7544 WP</code>
				<country>The Netherlands</country>
			</postal>
			<email>rick@openfortress.nl</email>
		</address>
	</author>

	<date day="26" month="January" year="2200"/>

	<abstract>
	<t>Most protocols support users under domain names, but HTTP does
	not.  Usage patterns in the wild do suggest a desire to have this
	facility.  This specification defines a header for user names,
	orthogonal to authentication and authorisation concerns.</t>
	</abstract>

</front>

<!--

CHANGES FROM 03 TO 04:
 * User header is not all of userinfo, but stops at a colon
 * User header may be empty, still showing a user agent's support
 * Not adding pressure on the "user:password" form deprecated in RFC 3896
 * Compatibility with Basic Authentication, use at the same time as User
 * Compatibility with RESTful Patterns, restraint to safe patterns
 * TODO: Caching

CHANGES FROM 02 TO 03:
 * Combined protocol aspects more logically
 * Remarks about characters sets supported in URI and User:
 * Example of shared account access

CHANGES FROM 01 TO 02:
 * Header renamed from "User-View" to "User", envvar is now HTTP_USER
 * No longer supported the header in responses (instead use redirection)
 * Redirection / Links retain user@ when relative w/o authority component

CHANGES FROM 00 TO 01:
 * Textual improvements of rough summing-up of requirements
 * Unknown headers are ignored as a matter of course
 * User part rendering in RFC 3986 is cautious about abuse patterns
 * Added environment variable HTTP_USERVIEW



-->


<middle>

<section title="Introduction" anchor="intro">

<t>Most protocols support Network Access Identifiers
<xref target="RFC7542"/> like john@example.com to
identify users like john under domains such as example.com.  The URI format
for HTTP can express [Section 2.7.1 of <xref target="RFC7230"/>]
such authority sections, and many online applications
seem to want to address individual users, but HTTP URIs do not usually
express user names.  This specification therefore introduces
a header "User", in close parallel to the "Host" header.</t>

<t>User names in HTTP are currently only used for authentication.  The userinfo
field in URIs has been used to carry such user names, but the formal intention
of the userinfo field in URIs is to specify a resource name space,
not an (authenticated) user identity.  By introducing
a new header field, this specification allows authentication to be orthogonal
to resource name space selection.</t>

<t>When user agents support (Basic and Digest) authentication through URIs,
they usually allow a "user:password" format in the authority section of URIs.
This practice has been
deprecated [Section 3.2.1 of <xref target="RFC3986"/>] but the form with
just "user" and no ":password" continues to be acceptable.  Different user
agents show varied handling for this form, sometimes flagging it incorrectly as
a security hazard, which also motivates a specification for proper handling.</t>

<!--
<t>TODO: Issue filed with HTTPbis,
https://github.com/httpwg/http-core/issues/278
and offered a Pull Request,
https://github.com/httpwg/http-core/compare/master...arpa2:userinfo-password
as a followup of somewhat late Errata against RFC7230,
https://www.rfc-editor.org/errata/eid5964</t>
-->

<t>The purpose of this specification is to define clear meaning for HTTP URIs
with a userinfo component.</t>

</section>


<section title="The HTTP User Header" anchor="header">

<t>The "User" header field provides an aspect of the desired
resource name scope.  The value can be inserted by software or be taken
from the userinfo component [Section 3.2 of <xref target="RFC3986"/>]
of the target URI but it MUST NOT include a ":" colon (U+003a) character.</t>

<t>The User header value holds
precisely one value with the following ABNF grammar:
<figure><artwork><![CDATA[
User = *( unreserved / pct-encoded / sub-delims )
]]></artwork></figure>
The referenced non-terminals are as for URIs <xref target="RFC3986"/>
and can be directly included in the quoted-string header form; a plain token
cannot express "(", ")", "=", ";" and "," without escaping
[Section 3.2.6 of <xref target="RFC7230"/>].</t>

<!--

CHARACTER SETS FOR URI-USERINFO AND HTTP-HEADER COMPARED:

This is useful to know if the userinfo can be inserted into the User
header without further ado.

unreserved  = ALPHA			OK_TOKEN	OK_QUOTED
	/ DIGIT				OK_TOKEN	OK_QUOTED
	/ "-"				OK_TOKEN	OK_QUOTED
	/ "."				OK_TOKEN	OK_QUOTED
	/ "_"				OK_TOKEN	OK_QUOTED
	/ "~"				OK_TOKEN	OK_QUOTED

pct-encoded = "%" HEXDIG HEXDIG		OK_TOKEN	OK_QUOTED

sub-delims = "!"			OK_TOKEN	OK_QUOTED
	/ "$"				OK_TOKEN	OK_QUOTED
	/ "&"				OK_TOKEN	OK_QUOTED
	/ "'"				OK_TOKEN	OK_QUOTED
	/ "("				NO_DELIM	OK_QUOTED
	/ ")"				NO_DELIM	OK_QUOTED
	/ "*"				OK_TOKEN	OK_QUOTED
	/ "+"				OK_TOKEN	OK_QUOTED
	/ ","				NO_DELIM	OK_QUOTED
	/ ";"				NO_DELIM	OK_QUOTED
	/ "="				NO_DELIM	OK_QUOTED

-->

<!--

CHARACTER SETS FOR URI-USERINFO AND NAI COMPARED:

Do not use this; it is up to the server to constrain the grammar of
the userinfo to something like a NAI.  It does make sense, but after
removal of escapes, so character sets matter less.

	URI \ NAI ::= "(" / ")" / "," / ";"
	NAI \ URI ::= "#" / "%" / "/" / "?" / "^" / "`" / "{" / "|" "}"
		    \ UTF8-xtra-char [defined in RFC 7542]

ALSO, A SYNTAX DIFFERENCE:

	In a URI, dots can be anywhere.

	In a NAI, dots separate non-empty character sequences.

ARE THERE DIFFERENCES IN CASE SENSITIVITY?

MAYBE:

	- Define our own characters, including ASCII pct-encoded
	- Use UTF8-xtra-char from RFC 7542 for UTF-8 specifics
	- Note that RFC 7542 does not pct-encode UTF-8

-->

</section>


<section title="URI Interpretation" anchor="uri">

<t>This section is informative.</t>

<t>The extension of resource naming with a user is a general concept
of the URI format and is also common for addressing users with SMTP,
SIP, XMPP and many other protocols.  By allowing users in HTTP resource
names, a better crossover of identities with these protocols can be
achieved.  Unlike server-specific user name mappings, the specified
meaning of URI userinfo enables such crossovers to be automated.</t>

<t>There is a current practice of storing an authentication name in
the userinfo portion of a URI, usually with a password in the deprecated
"user:password" form.  The reason why this is attractive is that it
allows sending of Basic authentication in the first request; Basic is
especially suited for this because it does not incorporate a server-sent
challenge.</t>

<t>Having never been standardised, the mechanistic side of this is highly
diverse, and far from portable between browsers.  In other words, URIs
cannot be passed around and their usage pattern is specific for the client
software in use.  On grounds of this immobility, it suffices to be backward
compatible <xref target="compat.basic"/> with this practice.</t>

<t>This specification follows the URI's intention of the userinfo field,
and prescribes copying its value into the User header.  It will however
remove anything from a colon onward, to match the portion of userinfo
that is to be rendered.</t>

<t>Both the general userinfo format and the removal of anything starting
from a colon allow the derivation of an empty string value for the User
header, which is indeed permitted.  Servers may interpret this empty
User header as they see fit; it may be a default page, to be used for
URIs that expect a user name need to be completed.  Or, after client
authentication, all reachable user-specific URIs may be listed.</t>

</section>


<section title="Protocol Handling of HTTP User" anchor="protocol">

<t>User agents SHOULD render userinfo in the target URI
(up to the first colon ":" (U+003a)
if it contains any [Section 3.2.1 of <xref target="RFC3986"/>])
though it may be helpful if it stands out graphically
[Section 7.6 of <xref target="RFC3986"/>].
User agents SHOULD NOT remove userinfo from the target URI.</t>

<t>Compliant user agents MUST pass userinfo in the target URI
(up to the first colon ":" (U+003a) if it contains any) as a User
header field if, and only if, the target URI contains a userinfo part.</t>

<t>The User header MAY appear in requests and MUST NOT occur in responses.
<!-- also not in trailers [Section 4.1 of <xref target="RFC7230"/>].  -->
When sending it, the user agent SHOULD generate User as the next header field after Host.
Transparent intermediates such as proxies and caches MUST NOT add,
remove or modify the User header.  The CONNECT method and Host header
both exclude this information, so the User header complements them.</t>

<t>Servers MAY ignore the User header
[Section 3.2.1 of <xref target="RFC7230"/>] and they MAY impose a more
restrictive grammar (like a NAI's utf8-username <xref target="RFC7542"/>)
than the URI syntax before further processing it.  When they do use it,
the Effective Request URI [Section 5.5 of <xref target="RFC7230"/>]
is constructed with the userinfo and the "@" at delimiter (U+0040)
prefixed to the host name and optional port.  Realms are specific to
an authority section [Section 2.2 of <xref target="RFC7235"/>]
and so a realm never spans across different userinfo values.</t>

<t>As a result of a consistent translation of any User header value
into the Effective Request URI, the server would map consistently to
resources.  It is merely enabled to include a User header as an
extra input variable to this mapping to resources.</t>

<t>HTTP caches <xref target="RFC7234"/> derive no privacy or
security concerns from the User header, but they do need to
differentiate requests based on it.  To accommodate that,
the Vary header [Section 7.1.4 of <xref target="RFC7231"/>] MUST
be generated by the server in the matching response, and the header
MUST either be a single "*" star (U+002a) or list the "User" name,
for all responses whose processing was influenced by the
User header.  This requirement has no bearing on server software and
configurations that ignore the User header.</t>

<t>During redirects or other traversals to (relative) HTTP URIs, the
user name MUST be overwritten when the new URI specifies an authority
component, and it MUST be kept otherwise.  User agents MUST send any
non-empty userinfo sub-components as the value of the User header in
requests for the target URI.</t>

</section>

<section title="Orthogonality of Authentication (Example)" anchor="ortho">

<t>This section is informative.</t>

<t>The user name in a URI refines the resource selection process on a host,
but it is easily confused with the orthogonal concept of
authentication.  Below is an example to demonstrate how these
concepts intuitively relate, but only as the result of access control, which
is a local choice in the server configuration
rather than a specification-enforced connection.
By demonstrating group access, the example shows a flexible model
that derives from this orthogonality of concepts.</t>

<t>John and Mary both work at the Sales department of Example, Inc and
John has written a document that he wants Mary to review.  Mary opens a
link to the document name space under the sales account at
https://sales@example.com/docs and her user agent sends:
<figure><artwork><![CDATA[
GET /docs HTTP/1.1
Host: example.com
User: sales
]]></artwork></figure>
The server redirects to add a slash, and when this is specific to
the sales account, it must inform caches about this with the Vary header:
<figure><artwork><![CDATA[
HTTP/1.1 301 Moved Permanently
Location: /docs/
Vary: User
]]></artwork></figure>
Since the new location lacks an authority component, this part is retained
from the referring URI, and the user agent redirects to
https://sales@example.com/docs/ by sending:
<figure><artwork><![CDATA[
GET /docs/ HTTP/1.1
Host: example.com
User: sales
]]></artwork></figure>
By this time, the server runs into access control, and decides that it
needs an authenticated user identity.  To this end, it responds with a
challenge to the "Documents" realm:
<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: KnockKnock realm="Documents"
Vary: User
]]></artwork></figure>
Mary's user agent needs to collect credentials, and may hint at the user
name "sales" from the URI but, this being the name of a shared resource,
Mary has no fitting credentials and instead authenticates as "mary":
<figure><artwork><![CDATA[
GET /docs/ HTTP/1.1
Host: example.com
User: sales
Authorization: KnockKnock realm="Documents", user="mary", ...
]]></artwork></figure>
At some point, the server accepts Mary's authentication and
proceeds to access control.  This phase checks if user "mary" may
access realm "Documents" of "https://sales@example.com" by checking
that Mary works for the Sales department.  Once this is assured,
the server returns the requested document list:
<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Vary: User
Content-Type: text/html

...
<a href="/docs/review.cgi?docid=123">Review 123 now</a>
...
]]></artwork></figure>
Mary clicks on the link to /docs/review.cgi?docid=123 and her user agent
sees a relative reference with no authority component, so this is
again reused from the referring URI.  The new URI therefore becomes
https://sales@example.com/docs/review.cgi?docid=123 for which the user
agent sends:
<figure><artwork><![CDATA[
GET /docs/review.cgi?docid=123 HTTP/1.1
Host: example.com
User: sales
Authorization: KnockKnock realm="Documents", user="mary", ...
]]></artwork></figure>
After access control, the server starts the CGI script with environment
variables LOCAL_USER=sales and REMOTE_USER=mary of which only the latter
is an authenticated result.  The script interprets the LOCAL_USER as a
group account and the REMOTE_USER as the acting group member, and returns
a page for review of the document and Mary can get to work.</t>

</section>


<section title="IANA Considerations" anchor="iana">

<t>IANA adds the following entry to the Message Headers registry:
<figure><artwork><![CDATA[
Header Field Name   Template   Protocol   Status    Reference
------------------  ---------  ---------  -------   ----------
User                           http       TBD       TBD:THIS_SPEC
]]></artwork></figure>
</t>

</section>

<section title="Security Considerations">

<t>The User header field as defined herein is orthogonal to issues of
authentication and authorisation, and adds no security concerns.</t>

<!-- blablabla
<t>These user names refine the model of resource addressing for HTTP,
but any concerns related to privacy or secrecy of resources are already
habitually addressed in servers.  This habit MUST be applied to
this new, more refined resource addressing model.</t>
-->

</section>

</middle>


<back>

<references title="Normative References">
<!-- <?rfc include="reference.RFC.2617.xml"?> -->
<?rfc include="reference.RFC.3986.xml"?>
<?rfc include="reference.RFC.7230.xml"?>
<?rfc include="reference.RFC.7231.xml"?>
<?rfc include="reference.RFC.7234.xml"?>
<?rfc include="reference.RFC.7235.xml"?>
</references>

<references title="Informative References">
<!-- <?rfc include="reference.RFC.3579.xml"?> -->
<!-- <?rfc include="reference.RFC.4121.xml"?> -->
<!-- <?rfc include="reference.RFC.5246.xml"?> -->
<!-- <?rfc include="reference.RFC.7055.xml"?> -->
<?rfc include="reference.RFC.7542.xml"?>
</references>


<section title="HTTP User Environment Variable" anchor="envvars">

<t>The following variable SHOULD be passed to applications that
run on top of the HTTP stack in a server:
<list style="hanging" hangIndent="6">
<t hangText="LOCAL_USER">gives the HTTP User header value
	after grammar checking and percent-decoding.  Like the customary
	variables HTTP_HOST and PATH_INFO, this specifies the
	resource being requested.  The HTTP_USER header does not
	describe the identity of the client-side user, which usually
	lands in a variable REMOTE_USER after authentication.</t>
</list></t>

</section>

<section title="Compatibility with Basic Authentication" anchor="compat.basic">

<t>This appendix is informative.</t>

<t>Basic authentication is regularly used as a quick and easy HTTP
authentication technique.  Several user agents continue to support it with
the "user:password@" URI prefix to a hostname, despite its deprecation.
This specification imposes no new constraints on this practice; it merely
prescribes to send the User header field, possibly in addition to an
existing pattern of Basic authentication.</t>

<t>The mapping from resource names to actual resources is the prerogative
of the server.  A server supportive of resource selection through Basic
authentication could ignore the User header field and still comply with
this specification.  A server that does recognise the User header field would
use it to locate a resource, before deciding about access control to that
resource; this may raise authentication requirements, and select schemes
that could be supported.  At this time, it may or may not welcome an added
Basic authentication attempt.  All this is server configuration.</t>

<t>This flexibility can support a transition from Basic authentication to
User header fields on the server, and allows client software to follow suit by
first adding the User header, and later dropping the deprated pattern with
"user:password" in the userinfo component of a URI.  Server administrators
have a free choice to gradually phase out clients or client configurations
that adhere to older and possibly deprecated usage patterns.</t>

<t>Sending both the User header and Basic authentication is only to be
expected from user agents who conflate resource userinfo with authentication
user.  Such user agents will be less flexible, and will not be able to
support more advanced usage patterns that separate these concepts, such as
shared/group resources addressed with the User header field and, when desired,
authentication through an independent set of headers.  Among the tools to
drive such patterns could be the negotiation of more advanced mechanisms,
even just Digest authentication.</t>

</section>

<section title="Compatibility with RESTful Patterns" anchor="compat.rest">

<t>This appendix is informative.</t>

<t>Whether and how the User header is interpreted is the prerogative of
the server.  The server will translate resources in the same manner when
provided with the same User header, and may do so without regard for the
method used.  The main concern is now if it will be addressed in the same
manner in every case.  This depends on the user agents.</t>

<t>Development environments make sending the User header field simple,
and so application support is as easy as the applications are flexible.
Binary user agents and especially ones that may lag behind in updates
therefore need some care for backward compatibility support.</t>

<t>The compatibility can be guaranteed for host names that always
require a User header; such resources may be described with a URI holding
a (possibly empty) userinfo field.  Failure to send a User header to
such resources when the URI holds one can be assumed to have originated
from a user agent that fails to support it.  When an offer for Basic authentication
is presented, it may be interpreted as the conflated approach to userinfo, and
treated as a substitute for the User header.  If neither is offered, an
error may be reported, or control redirected to another means of selecting
a resource user.</t>

<t>This indicates that the server is able to detect possible problems,
and can avoid accidentally binding a request to an unintended resource
as a result of a missing User header.</t>

<t>Under the fallback, resources gain an alias under a local convention.
The URI form with a userinfo field has more semantics, and offers better
interpretation options to clients, so among aliases this is the form that
should be treated as the canonical URI.</t>

</section>

<section title="Compatibility with Caching" anchor="compat.cache">

<t>This appendix is informative.</t>

<t>Whether and how the User header is used to find resources is the
prerogative of their server.  A conservative cache design might insert
the User header value in request URIs, but lose the capability of
seeing the equivalence of a resource as perceived by the server.
The inclusion of the name "User" in the Vary header of the response
provides a more accurate cache instruction.</t>

<t>Whether a result is "private" is independent of the User header, as that
only signifies a refinement of the resource name space on the server.
The rules that signify authentication as default indicator of privacy
is orthogonal to the User header.  This is one reason why it is good
to separate resource user and authentication user; Basic authentication
with no password may be used to select resources, but it reduces cache performance.</t>

</section>

<section title="Acknowledgements" anchor="ack">

<t>This specification could be improved thanks to input from
Daniel Stenberg,
Amos Jeffries,
Paul Vixie,
James Fuller
and
Henri Manson.</t>


</section>

</back>

</rfc>
